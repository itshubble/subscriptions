{"version":3,"sources":["workspace/common/WorkspaceToolbar.js","utils.js","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","../node_modules/@material-ui/core/esm/CardHeader/CardHeader.js","../node_modules/@material-ui/core/esm/internal/svg-icons/Person.js","../node_modules/@material-ui/core/esm/Avatar/Avatar.js","workspace/plan/PlanCard.js","workspace/plan/ViewPlan.js"],"names":["useToolbarStyles","makeStyles","theme","appBar","color","palette","primary","background","toolbar","paddingLeft","spacing","paddingRight","buttons","marginLeft","action","textTransform","title","text","fontWeight","highlight","type","secondary","main","backgroundColor","lighten","light","dark","actionIcon","marginRight","WorkspaceToolbar","props","classes","selectionCount","actions","onAction","makeActionHandler","identifier","normalTitle","className","variant","id","component","selectedTitle","selected","position","elevation","clsx","map","size","onClick","icon","Fragment","toDateString","date","toLocaleDateString","undefined","year","month","day","Card","React","ref","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","root","withStyles","overflow","name","CardContent","_props$component","Component","padding","paddingBottom","CardHeader","avatar","_props$disableTypogra","disableTypography","subheaderProp","subheader","subheaderTypographyProps","titleProp","titleTypographyProps","Typography","display","content","alignItems","flex","alignSelf","marginTop","createSvgIcon","d","Avatar","alt","childrenProp","children","imgProps","sizes","src","srcSet","_props$variant","loaded","_ref","_React$useState","setLoaded","active","image","Image","onload","onerror","useLoaded","hasImg","hasImgNotFailing","img","Person","fallback","system","colorDefault","justifyContent","flexShrink","width","height","fontFamily","typography","fontSize","pxToRem","lineHeight","borderRadius","userSelect","default","grey","circle","rounded","shape","square","textAlign","objectFit","textIndent","useStyles","green","value","close","error","edit","fields","render","createdAt","billingCyclePeriod","billingCyclePeriodUnit","pricePerBillingCycle","setupFee","trialPeriod","trialPeriodUnit","totalBillingCycles","renews","PlanCard","code","description","substring","toUpperCase","subtitle","Grid","container","field","item","lg","planCard","maxWidth","section","marginBottom","sectionTitle","progress","top","left","mapDispatchToProps","fetchPlan","clearPlan","editPlan","connect","state","plan","withRouter","useParams","useEffect","console","log","CircularProgress","onEdit"],"mappings":"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","file":"static/js/13.e21bb1fc.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    appBar: {\n        color: theme.palette.primary,\n        background: \"white\",\n    },\n    toolbar: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    buttons: {\n        marginLeft: \"auto\",\n    },\n    action: {\n        textTransform: \"none\",\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n    title: {\n        color: theme.palette.text.primary,\n        fontWeight: 500,\n    },\n    highlight:\n        theme.palette.type === \"light\"\n            ? {\n                  color: theme.palette.secondary.main,\n                  backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n              }\n            : {\n                  color: theme.palette.text.primary,\n                  backgroundColor: theme.palette.secondary.dark,\n              },\n    actionIcon: {\n        marginRight: 4,\n    },\n}));\n\nfunction WorkspaceToolbar(props) {\n    const classes = useToolbarStyles();\n    const { title, selectionCount, actions, onAction } = props;\n\n    const makeActionHandler = (identifier) => () => onAction(identifier);\n\n    const normalTitle = (\n        <Typography\n            className={classes.title}\n            variant=\"h6\"\n            id=\"tableTitle\"\n            component=\"div\"\n        >\n            {title}\n        </Typography>\n    );\n\n    const selectedTitle = (\n        <Typography\n            className={classes.title}\n            variant=\"subtitle1\"\n            component=\"div\"\n        >\n            {selectionCount} selected\n        </Typography>\n    );\n\n    const selected = selectionCount > 0;\n\n    const recordButtons = () => {\n        if (actions) {\n            return actions.map(\n                (action) =>\n                    !action.primary && (\n                        <Button\n                            className={classes.action}\n                            variant=\"text\"\n                            size=\"small\"\n                            color=\"primary\"\n                            onClick={makeActionHandler(action.identifier)}\n                        >\n                            <action.icon className={classes.actionIcon} />\n                            {action.title}\n                        </Button>\n                    )\n            );\n        }\n        return null;\n    };\n\n    const normalButtons = () => {\n        if (actions) {\n            return (\n                <React.Fragment>\n                    {actions.map(\n                        (action) =>\n                            action.primary && (\n                                <Button\n                                    className={classes.action}\n                                    variant=\"text\"\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    onClick={makeActionHandler(\n                                        action.identifier\n                                    )}\n                                >\n                                    <action.icon\n                                        className={classes.actionIcon}\n                                    />\n                                    {action.title}\n                                </Button>\n                            )\n                    )}\n                </React.Fragment>\n            );\n        }\n        return null;\n    };\n\n    return (\n        <AppBar position=\"static\" elevation={1} className={classes.appBar}>\n            <Toolbar\n                className={clsx(classes.toolbar, {\n                    [classes.highlight]: selected,\n                })}\n            >\n                {selected ? selectedTitle : normalTitle}\n\n                <div className={classes.buttons}>\n                    {selected ? recordButtons() : normalButtons()}\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nWorkspaceToolbar.propTypes = {\n    selectionCount: PropTypes.number.isRequired,\n};\n\nexport default WorkspaceToolbar;\n","export function toDateString(date) {\n    const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n    return date.toLocaleDateString(undefined, options);\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 16\n  },\n\n  /* Styles applied to the avatar element. */\n  avatar: {\n    flex: '0 0 auto',\n    marginRight: 16\n  },\n\n  /* Styles applied to the action element. */\n  action: {\n    flex: '0 0 auto',\n    alignSelf: 'flex-start',\n    marginTop: -8,\n    marginRight: -8\n  },\n\n  /* Styles applied to the content wrapper element. */\n  content: {\n    flex: '1 1 auto'\n  },\n\n  /* Styles applied to the title Typography element. */\n  title: {},\n\n  /* Styles applied to the subheader Typography element. */\n  subheader: {}\n};\nvar CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(props, ref) {\n  var action = props.action,\n      avatar = props.avatar,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      subheaderProp = props.subheader,\n      subheaderTypographyProps = props.subheaderTypographyProps,\n      titleProp = props.title,\n      titleTypographyProps = props.titleTypographyProps,\n      other = _objectWithoutProperties(props, [\"action\", \"avatar\", \"classes\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\n\n  var title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps), title);\n  }\n\n  var subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"textSecondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps), subheader);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), avatar && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.avatar\n  }, avatar), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content\n  }, title, subheader), action && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar for the Card Header.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The content of the Card Title.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardHeader'\n})(CardHeader);","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"\n}), 'Person');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Person from '../internal/svg-icons/Person';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexShrink: 0,\n      width: 40,\n      height: 40,\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(20),\n      lineHeight: 1,\n      borderRadius: '50%',\n      overflow: 'hidden',\n      userSelect: 'none'\n    },\n\n    /* Styles applied to the root element if not `src` or `srcSet`. */\n    colorDefault: {\n      color: theme.palette.background.default,\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]\n    },\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {},\n\n    /* Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"square\"`. */\n    square: {\n      borderRadius: 0\n    },\n\n    /* Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: {\n      width: '100%',\n      height: '100%',\n      textAlign: 'center',\n      // Handle non-square image. The property isn't supported by IE 11.\n      objectFit: 'cover',\n      // Hide alt text.\n      color: 'transparent',\n      // Hide the image broken icon, only works on Chrome.\n      textIndent: 10000\n    },\n\n    /* Styles applied to the fallback icon */\n    fallback: {\n      width: '75%',\n      height: '75%'\n    }\n  };\n};\n\nfunction useLoaded(_ref) {\n  var src = _ref.src,\n      srcSet = _ref.srcSet;\n\n  var _React$useState = React.useState(false),\n      loaded = _React$useState[0],\n      setLoaded = _React$useState[1];\n\n  React.useEffect(function () {\n    if (!src && !srcSet) {\n      return undefined;\n    }\n\n    setLoaded(false);\n    var active = true;\n    var image = new Image();\n    image.src = src;\n    image.srcSet = srcSet;\n\n    image.onload = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('loaded');\n    };\n\n    image.onerror = function () {\n      if (!active) {\n        return;\n      }\n\n      setLoaded('error');\n    };\n\n    return function () {\n      active = false;\n    };\n  }, [src, srcSet]);\n  return loaded;\n}\n\nvar Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {\n  var alt = props.alt,\n      childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      imgProps = props.imgProps,\n      sizes = props.sizes,\n      src = props.src,\n      srcSet = props.srcSet,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'circle' : _props$variant,\n      other = _objectWithoutProperties(props, [\"alt\", \"children\", \"classes\", \"className\", \"component\", \"imgProps\", \"sizes\", \"src\", \"srcSet\", \"variant\"]);\n\n  var children = null; // Use a hook instead of onError on the img element to support server-side rendering.\n\n  var loaded = useLoaded({\n    src: src,\n    srcSet: srcSet\n  });\n  var hasImg = src || srcSet;\n  var hasImgNotFailing = hasImg && loaded !== 'error';\n\n  if (hasImgNotFailing) {\n    children = /*#__PURE__*/React.createElement(\"img\", _extends({\n      alt: alt,\n      src: src,\n      srcSet: srcSet,\n      sizes: sizes,\n      className: classes.img\n    }, imgProps));\n  } else if (childrenProp != null) {\n    children = childrenProp;\n  } else if (hasImg && alt) {\n    children = alt[0];\n  } else {\n    children = /*#__PURE__*/React.createElement(Person, {\n      className: classes.fallback\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),\n    ref: ref\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? Avatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Attributes applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   */\n  imgProps: PropTypes.object,\n\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes: PropTypes.string,\n\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet: PropTypes.string,\n\n  /**\n   * The shape of the avatar.\n   */\n  variant: PropTypes.oneOf(['circle', 'rounded', 'square'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatar'\n})(Avatar);","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { green } from \"@material-ui/core/colors\";\nimport { toDateString } from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {},\n    avatar: {\n        backgroundColor: green[500],\n    },\n    title: {\n        fontWeight: 600,\n        fontSize: 14,\n    },\n    value: {\n        fontSize: 15,\n    },\n    icon: {\n        display: \"inline-block\",\n        marginRight: 4,\n    },\n    close: {\n        marginLeft: \"auto\",\n        color: theme.palette.error.main,\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n    edit: {\n        marginLeft: \"auto\",\n        color: theme.palette.primary.main,\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n}));\n\nconst fields = [\n    {\n        identifier: \"createdAt\",\n        title: \"Created At\",\n        size: 6,\n        render: (props) => toDateString(props.createdAt),\n    },\n    {\n        identifier: \"billingCyclePeriod\",\n        title: \"Billing Cycle Period\",\n        size: 6,\n        render: (props) =>\n            props.billingCyclePeriod\n                ? props.billingCyclePeriod + \" \" + props.billingCyclePeriodUnit\n                : \"Unavailable\",\n    },\n    {\n        identifier: \"pricePerBillingCycle\",\n        title: \"Price\",\n        size: 6,\n        render: (props) =>\n            props.pricePerBillingCycle\n                ? props.pricePerBillingCycle + \" INR\"\n                : \"Unavailable\",\n    },\n    {\n        identifier: \"setupFee\",\n        title: \"Setup Fee\",\n        size: 6,\n        render: (props) =>\n            props.setupFee ? props.setupFee + \" INR\" : \"Unavailable\",\n    },\n    {\n        identifier: \"trialPeriod\",\n        title: \"Trial Period\",\n        size: 6,\n        render: (props) =>\n            props.trialPeriod\n                ? props.trialPeriod + \" \" + props.trialPeriodUnit\n                : \"Unavailable\",\n    },\n    {\n        identifier: \"totalBillingCycles\",\n        title: \"Total Billing Cycles\",\n        size: 6,\n        render: (props) => props.totalBillingCycles,\n    },\n    {\n        identifier: \"renew\",\n        title: \"Renews\",\n        size: 6,\n        render: (props) => (props.renews ? \"Yes\" : \"No\"),\n    },\n];\n\nfunction PlanCard(props) {\n    const classes = useStyles();\n    const { className, name, code, description } = props;\n\n    return (\n        <Card className={clsx(classes.root, className)}>\n            <CardHeader\n                avatar={\n                    <Avatar className={classes.avatar}>\n                        {name.substring(0, 1).toUpperCase()}\n                    </Avatar>\n                }\n                title={name}\n                subheader={code}\n                subtitle={description}\n            />\n\n            <CardContent>\n                <Grid container={true} spacing={2}>\n                    {fields.map((field) => (\n                        <React.Fragment>\n                            <Grid item={true} lg={field.size}>\n                                <Typography\n                                    variant=\"subtitle1\"\n                                    color=\"textSecondary\"\n                                    className={classes.title}\n                                >\n                                    {field.title}\n                                </Typography>\n                                <Typography className={classes.value}>\n                                    {field.render(props)}\n                                </Typography>\n                            </Grid>\n                        </React.Fragment>\n                    ))}\n                </Grid>\n            </CardContent>\n\n            {/*<CardActions>\n                <Button className={classes.edit} onClick={onEdit}>\n                    <EditIcon className={classes.icon} />\n                    Edit\n                </Button>\n            </CardActions>*/}\n        </Card>\n    );\n}\n\nexport default PlanCard;\n","import React, { useEffect } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport { useParams, withRouter } from \"react-router-dom\";\n\nimport WorkspaceToolbar from \"../common/WorkspaceToolbar\";\nimport PlanCard from \"./PlanCard\";\nimport * as actions from \"../../redux/actions\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        padding: 16,\n    },\n    planCard: {\n        maxWidth: 600,\n    },\n    section: {\n        marginBottom: 32,\n    },\n    sectionTitle: {\n        fontSize: 20,\n        marginBottom: 16,\n        fontWeight: 500,\n    },\n    progress: {\n        position: \"fixed\",\n        top: \"50%\",\n        left: \"50%\",\n        marginTop: -24,\n        marginLeft: -24,\n    },\n}));\n\nfunction ViewPlan(props) {\n    const classes = useStyles();\n    const { plan, fetchPlan, clearPlan, editPlan } = props;\n    const { identifier } = useParams();\n\n    const handleEdit = () => {\n        editPlan(plan);\n    };\n\n    useEffect(() => {\n        fetchPlan(identifier);\n        return clearPlan;\n    }, [identifier, fetchPlan, clearPlan]);\n\n    console.log(plan);\n\n    return (\n        <div>\n            <WorkspaceToolbar title=\"Plan\" />\n            {!plan && (\n                <CircularProgress size=\"48px\" className={classes.progress} />\n            )}\n            {plan && (\n                <div className={classes.container}>\n                    <div className={classes.section}>\n                        <Typography\n                            variant=\"h2\"\n                            className={classes.sectionTitle}\n                        >\n                            General\n                        </Typography>\n                        <PlanCard\n                            className={classes.planCard}\n                            onEdit={handleEdit}\n                            name={plan.name}\n                            code={plan.code}\n                            description={plan.description}\n                            createdAt={plan.createdAt}\n                            pricePerBillingCycle={plan.pricePerBillingCycle}\n                            billingCyclePeriod={plan.billingCyclePeriod}\n                            billingCyclePeriodUnit={plan.billingCyclePeriodUnit}\n                            totalBillingCycles={plan.totalBillingCycles}\n                            setupFee={plan.setupFee}\n                            trialPeriod={plan.trialPeriod}\n                            trialPeriodUnit={plan.trialPeriodUnit}\n                            renews={plan.renews}\n                        />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        plan: state.plan,\n    };\n}\n\nconst mapDispatchToProps = {\n    fetchPlan: actions.fetchPlan,\n    clearPlan: actions.clearPlan,\n    editPlan: actions.editPlan,\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withRouter(ViewPlan));\n"],"sourceRoot":""}